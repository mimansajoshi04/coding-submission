class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        int incomingEdges[] = new int[numCourses];
        HashMap<Integer, ArrayList<Integer>> map = new HashMap<Integer, ArrayList<Integer>>();


        for (int[] v : prerequisites) {
            int v1 = v[0];
            int v2 = v[1];

            if (!map.containsKey(v2)) {
                map.put(v2, new ArrayList<>());
            }
            map.get(v2).add(v1);

            incomingEdges[v1]++;
        }

        int tot = 0;
        boolean visited[] = new boolean[numCourses];

        while(tot<numCourses){
            int ind = -1;
            for(int i = 0;i<numCourses;i++){
                if(incomingEdges[i]==0 && !visited[i]){
                    ind = i;
                    break;
                }
            }

            if(ind==-1)
                return false;

            for(int i: map.getOrDefault(ind, new ArrayList<Integer>()))
                incomingEdges[i]--;

            visited[ind] = true;
            tot++;
        }

        return true;

        


    }
}
