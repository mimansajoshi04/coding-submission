class Solution {

    private boolean[][] visited;
    
    private boolean findPresence(int m, int n, char[][] board,int x,int y, char[] word, int index){
        if(index == word.length)
            return true;
            
        this.visited[x][y] = true;
        if(x+1<m){
            if(!this.visited[x+1][y] && board[x+1][y]==word[index]){
                if(this.findPresence(m,n,board,x+1,y,word,index+1))
                    return true;
            }
        }
        if(x-1>=0){
            if(!this.visited[x-1][y] && board[x-1][y]==word[index]){
                if(this.findPresence(m,n,board,x-1,y,word,index+1))
                    return true;
            }
        }
        if(y+1<n){
            if(!this.visited[x][y+1] && board[x][y+1]==word[index]){
                if(this.findPresence(m,n,board,x,y+1,word,index+1))
                    return true;
            }
        }
        if(y-1>=0){
            if(!this.visited[x][y-1] && board[x][y-1]==word[index]){
                if(this.findPresence(m,n,board,x,y-1,word,index+1))
                    return true;
            }
        }
        this.visited[x][y] = false;
        return false;
    }
    
    public boolean exist(char[][] board, String word) {
        var m = board.length;
        var n = board[0].length;

        this.visited = new boolean[m][n];

        char[] find = word.toCharArray();

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]==find[0]){
                    if(this.findPresence(m,n,board,i,j,find,1))
                        return true;
                }
            }
        }

        return false;
    }
}
