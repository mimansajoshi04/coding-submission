class Solution {

    static int[][] dirs = {{0, -1}, {-1, 0}, {1, 0}, {0, 1}};

    private void markSafe(char[][] board, int i, int j, int m, int n) {
        if (i < 0 || j < 0 || i >= m || j >= n || board[i][j] != 'O') return;

        board[i][j] = 'S'; 

        for (int[] dir : dirs) {
            int nx = i + dir[0];
            int ny = j + dir[1];
            markSafe(board, nx, ny, m, n);
        }
    }

    public void solve(char[][] board) {
        int m = board.length;
        int n = board[0].length;

        for (int i = 0; i < m; i++) {
            if (board[i][0] == 'O') markSafe(board, i, 0, m, n);
            if (board[i][n - 1] == 'O') markSafe(board, i, n - 1, m, n);
        }
        for (int j = 0; j < n; j++) {
            if (board[0][j] == 'O') markSafe(board, 0, j, m, n);
            if (board[m - 1][j] == 'O') markSafe(board, m - 1, j, m, n);
        }

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (board[i][j] == 'O') board[i][j] = 'X';
                else if (board[i][j] == 'S') board[i][j] = 'O';
            }
        }
    }
}
