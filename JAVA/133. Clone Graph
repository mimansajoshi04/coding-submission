/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> neighbors;
    public Node() {
        val = 0;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val) {
        val = _val;
        neighbors = new ArrayList<Node>();
    }
    public Node(int _val, ArrayList<Node> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
}
*/

class Solution {

    HashMap<Node,Node> map = new HashMap<Node,Node>();

    public void clone(Node node) {
        if(node==null) return;
        
        if(!map.containsKey(node)){
            map.put(node,new Node(node.val));
        }

        for(Node n: node.neighbors){
            if(!map.containsKey(n)){
                clone(n);
            }

            map.get(node).neighbors.add(map.get(n));
        }
    }

    public Node cloneGraph(Node node) {
        clone(node);
        return map.get(node);
    }
}
