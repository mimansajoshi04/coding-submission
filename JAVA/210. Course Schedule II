class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        boolean visited[] = new boolean[numCourses];
        int incomingEdges[] = new int[numCourses];
        HashMap<Integer, ArrayList<Integer>> map = new HashMap<Integer, ArrayList<Integer>>();

        for(int[] arr: prerequisites){
            int v1 = arr[0];
            int v2 = arr[1];

            if(!map.containsKey(v2)){
                map.put(v2, new ArrayList<Integer>());
            }

            var list = map.get(v2);
            list.add(v1);
            incomingEdges[v1]++;
            map.put(v2,list);
        }

        int[] order = new int[numCourses];
        int tot = 0;
        while(tot<numCourses){

            int ind = -1;
            for(int i=0;i<numCourses;i++){
                if(incomingEdges[i]==0 && !visited[i]){
                    ind = i;
                    break;
                }
            }

            if(ind==-1)
                break;

            order[tot] = ind;
            visited[ind] = true;

            for(int i: map.getOrDefault(ind, new ArrayList<Integer>()))
                incomingEdges[i]--;

            tot++;
        }

        if(tot!=numCourses)
            return new int[0];
        return order;

    }
}
