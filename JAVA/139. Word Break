class Solution {

    private HashSet<String> dictionary;
    private HashMap<String, Boolean> memo = new HashMap<String, Boolean>();

    private boolean helperFunction(String string, int i, int j){
        if(i>j)
            return false;

        //System.out.println(string.substring(i,j) + " " + i + " " + j);
        String s = string.substring(i,j);

        if(memo.getOrDefault(s, false))
            return true;

        if(dictionary.contains(s)){
            memo.put(s, true);
            return true;
        }

        for(int k=i+1;k<j;k++){
            boolean left = helperFunction(string, i,k);
            boolean right = helperFunction(string, k,j);

            if(left && right){
                memo.put(string, true);
                return true;
            }
        }

        memo.put(string, false);
        return false;        
    }

    private boolean helperDP(String s) {
        int n = s.length();
        boolean[] dp = new boolean[n + 1];
        dp[0] = true; // Empty string is valid

        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < i; j++) {
                String sub = s.substring(j, i);
                if (dp[j] && dictionary.contains(sub)) {
                    dp[i] = true;
                    break;
                }
            }
        }

        return dp[n];
    }

    public boolean wordBreak(String s, List<String> wordDict) {
        dictionary = new HashSet<String>(wordDict);
        //return helperFunction(s, 0, s.length());
        return helperDP(s);
    }
}
