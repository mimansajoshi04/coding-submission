import java.util.*;

class Solution {
    public int[] minInterval(int[][] intervals, int[] queries) {
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
        int[][] queryWithIndex = new int[queries.length][2];
        for (int i = 0; i < queries.length; i++) {
            queryWithIndex[i][0] = queries[i];
            queryWithIndex[i][1] = i;
        }
        Arrays.sort(queryWithIndex, Comparator.comparingInt(a -> a[0]));

        PriorityQueue<int[]> minHeap = new PriorityQueue<>((a, b) -> Integer.compare(a[0], b[0]));
        int[] res = new int[queries.length];
        int i = 0;

        for (int[] q : queryWithIndex) {
            int query = q[0];
            int idx = q[1];

            while (i < intervals.length && intervals[i][0] <= query) {
                int len = intervals[i][1] - intervals[i][0] + 1;
                minHeap.offer(new int[]{len, intervals[i][1]});
                i++;
            }

            while (!minHeap.isEmpty() && minHeap.peek()[1] < query) {
                minHeap.poll();
            }

            res[idx] = minHeap.isEmpty() ? -1 : minHeap.peek()[0];
        }

        return res;
    }
}
